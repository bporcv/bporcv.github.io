<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[创建第一个仓库并配置Local用户信息]]></title>
    <url>%2FGit%2Ff55b47bd.html</url>
    <content type="text"><![CDATA[把已有代码纳入Git管理新建项目使用Git管理]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA多线程学习笔记 —— 线程的简介与入门]]></title>
    <url>%2FJava%2F5169e384.html</url>
    <content type="text"><![CDATA[理论知识为什么会出现多线程多线程出现的主要原因 科学技术的发展。计算机从早期的巨型机到微型机，从早期的单核CPU到现在的多核CPU，从单核CPU的伪多线程到现在多核CPU的真正意义上的多线程，以及取决于决定性因素的CPU处理能力与程序运行的高度不匹配都是促使多线程出现的原因之一， 贪婪之心。人是串行化的动物（神童，天才，超能力者除外），一次只能做一件事，当然，只要给与足够的时间，同时交给你的任务总是能够采用串行化的方式执行完，不知道这是不是996的由来。人虽然不能，但是计算机可以，计算机并行执行的能力相较于人类同时处理多种事情导致的上下文切换，更能保证正确性。 充分利用资源。我们都知道CPU的运行速度是很快的，计算机在执行非CPU型任务，比如：读取文件，写数据到数据库，此时CPU是空闲的，但是却会因为程序是串行化（非多线程程序）的执行，而导致CPU得不到很好的利用，其实，此时CPU本可以做其他事情的，如继续读取其他的指令进行执行。这样也能充分的利用CPU资源，高效的完成任务。 串行与并行在上面我们提到了串行，并行的概，那么什么是串行，什么是并行。在程序的世界里，串行和并行主要是指程序任务的执行方式。 串行 多个任务时，各个任务按顺序执行，完成一个之后才能执行下一个。 并行 多个任务时，多个任务可以同时执行 举个简单的例子用来理解上面的概念： 每个人或多或少都有过去窗口打饭的经历，那么当只有一个窗口的时候，如果你想吃饭怎么办呢，只好排队对吧，因为窗口只有一个，那么当你前面的的人在没有打饭完成之前，你都只好等着，等你前面的人依次排队把饭打完才能轮到你打饭对吧，这就是串行，排队式，一个接一个的执行，只有前一个执行完成才能轮到你的执行。打饭打了很多天了，结果每天都会因为有很多人因为等的时间比出去找个新地方吃饭的时间要长而选择离开，而你是最能忍的，你觉得还可以接受，主要是饭菜可口，但是食堂老板不接受啊，这跑的可都是钱呀，他进行调研之后仔细一算，决定再开一个窗口，来提高食堂供应饭菜的速度，这样同一时间内就能提供两份饭菜了，从前丢失的顾客又再次投入了老板的怀抱，老板开心的笑了。其实这里的增设窗口就是并行的处理了顾客等待时间的问题，提供了一种能力，一种能够同时供应两个用户的就餐能力。 针对上面的问题，我们会在下面通过实战模拟来体会一下串行和并行。 Java中的多线程很多人在使用java中的多线程的时候总是搞不清楚某些概念，而导致使用不好多线程。首先要能够区分的概念我认为是线程对象和线程的概念，相信来学线程的，一定是对java基础还是有一定了解的，我们常常一说线程就会说Thread，很多人就会认为Thread就是一个线程，真的是这样吗?显然不是这样，这是一个认知的误区，那么我们来分析下到底什么是线程，什么是线程对象 线程对象 线程对象，顾名思义——持有线程的对象。那么在JAVA中，是谁呢，没错，就是我们的Thread对象，无论你是直接new出来的Thread对象，还是其子类的实例化，只要在没有执行它的start()方法，那么这个对象就可以称之为线程对象，它只是持有这个线程的引用，并没有通过你的new方法创建了一个线程。 线程 如果仔细理解了上面线程对象的概念，那么就不难理解这里的线程的概念，只有当我们显示的调用了这个线程对象的start()方法时，才能称之为真正的创建了一个线程，那么这个线程是怎么创建的呢，这就和操作系统有关了，JAVA会通过调用本地方法 start0()来再操作系统中开辟线程的生存空间，从而创建一个我们理解意义上的线程。 如果上述概念已经澄清了，那么我们就可以学习JAVA中线程的实现方式了。 实现方式 声明一个类继承自Thread，并重写其run()方法 声明一个类实现Runnable接口，实现其run()方法，将其作为Thread的参数来创建线程 实战将会上面描述的窗口打饭进行描述，用于达成以下目的 理解串行和并行 理解线程对象和线程 使用线程 体会线程下面我们创建一个线程对象，然后启动这个线程，查看执行结果 创建线程方式一： 声明一个类继承自Thread，并重写其run()方法 123456789101112131415161718192021222324252627282930313233343536373839public class TaskThread extends Thread &#123; // run()方法是线程的主要业务执行单元 @Override public void run() &#123; System.out.println("我是TaskThread，我的任务就是执行一系列的任务"); &#125; public static void main(String[] args) &#123; /*======================================继承方式创建一个线程=========================*/ /** * 这里仅是声明了一个线程对象，并没有实际的创建出一个线程 */ TaskThread taskThread = new TaskThread(); /** * 这里是将线程对象变成一个线程的方法，如果注释这行，启动程序的时候讲不会打印`我是一个线程， * 新创建的哦`这句话。由于线程的执行需要CPU的调度，而不是调用的start方法后就立即执行 */ taskThread.start(); /*======================================内部类方式创建========================*/ // 采用内部类方式创建，如果不重写run方法，则什么也不会输出 Thread thread = new Thread() &#123; @Override public void run() &#123; System.out.println("我是一个线程，新创建的哦。"); &#125; &#125;; thread.start(); System.out.println("main方法执行结束"); &#125;&#125; 创建线程方式二： 声明一个类实现Runnable接口，实现其run()方法，将其作为Thread的参数来创建线程 123456789101112131415161718public class TaskRunnable implements Runnable &#123; @Override public void run() &#123; System.out.println("我是通过Runnable方式创建的线程哦"); &#125; public static void main(String[] args) &#123; // 创建一个线程对象，使用实现了Runnable接口的对象作为参数 Thread thread = new Thread(new TaskRunnable()); // 线程对象启动，成为一个线程 thread.start(); System.out.println("main方法结束了哦"); &#125;&#125; 一个窗口点餐（串行）code清单1 12345678910111213141516171819202122232425/** * @ClassName SingleWindowOrderFood * @Description 单个窗口点餐 * @Author Administrator * @Date 2019/10/11 22:56 * @Version 1.0 */public class SingleWindowOrderFood &#123; public static void main(String[] args) &#123; System.out.println("到饭点了，大家可以开始排队点餐了"); long start = System.currentTimeMillis(); // 窗口一： 处理50人的用餐 for (int i = 0; i &lt; 50; i++) &#123; try &#123; // 这里模拟一个人点餐需要1秒，那么50个人点餐就需要50s Thread.sleep(1_000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println("一个窗口，每人耗时1秒，50人点餐，执行总共耗时：" + ((System.currentTimeMillis() - start) / 1000) +"s"); &#125;&#125; 通过运行上述的代码，我们可以发现，程序一共跑了50s 可能有人会写出下面的代码，心想：不就是两个窗口吗，我写两个循环不就完了，分别处理25个客户请求： 1234567891011121314151617181920212223242526272829public class DoubleWindowsOrderFood &#123; public static void main(String[] args) &#123; System.out.println("到饭点了，大家可以开始排队点餐了,今天两个窗口哦"); long start = System.currentTimeMillis(); // 窗口一： 处理25人的用餐 System.out.println("窗口一点餐开始"); for (int i = 0; i &lt; 25; i++) &#123; try &#123; // 这里模拟一个人点餐需要1秒，那么25个人点餐就需要25s Thread.sleep(1_000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println("窗口一点餐结束"); System.out.println("窗口二点餐开始"); // 窗口二： 处理25人的用餐 for (int i = 0; i &lt; 25; i++) &#123; try &#123; // 这里模拟一个人点餐需要1秒，那么25个人点餐就需要25s Thread.sleep(1_000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println("窗口二点餐结束"); System.out.println("两个窗口，每人耗时1秒，50人点餐，执行总共耗时：" + ((System.currentTimeMillis() - start) / 1000) + "s"); &#125;&#125; 执行结果： 其实这个的执行结果和上面单个窗口的执行结果是一样的，那么我们来分析一下为什么？很简单，程序是串行化的，也就是一行一行执行的，并没有做到并行化执行，他不会从窗口一就直接跳到窗口二的代码去，只能一行一行的执行，一行一行的出结果，所以这里执行的结果都是一样的，都会耗费50s 并行化改造站在生活的角度，两个窗口肯定是同时提供服务的，而不是必须等一个执行完了，才开始第二个，我们需要真正意义上的贴近生活的设计，那么线程就是用来干这个事的，下面我们对代码进行改造一下。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class OrderFoodConcurrency &#123; public static void main(String[] args) &#123; System.out.println("到饭点了，大家可以开始排队点餐了,今天两个窗口哦，这里并行点餐哦"); Thread windowOne = new Thread()&#123; @Override public void run() &#123; long start = System.currentTimeMillis(); System.out.println("窗口一开始点餐了"); // 窗口一： 处理25人的用餐 for (int i = 0; i &lt; 25; i++) &#123; try &#123; // 这里模拟一个人点餐需要1秒，那么25个人点餐就需要25s Thread.sleep(1_000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println("窗口一点餐耗时：" + ((System.currentTimeMillis() - start) / 1000) + "s"); &#125; &#125;; windowOne.start(); Thread windowTwo = new Thread()&#123; @Override public void run() &#123; long start = System.currentTimeMillis(); System.out.println("窗口二开始点餐了"); // 窗口二： 处理25人的用餐 for (int i = 0; i &lt; 25; i++) &#123; try &#123; // 这里模拟一个人点餐需要1秒，那么25个人点餐就需要25s Thread.sleep(1_000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; System.out.println("窗口二点餐耗时：" + ((System.currentTimeMillis() - start) / 1000) + "s"); &#125; &#125;; windowTwo.start(); try &#123; // 这里让main方法睡眠30s，主要是为了验证整个程序的执行时间，当然在后面会有来统计线程 // 执行时间的方法,这里就不做讲解了，其实main方法也是执行在一个线程中的，名字就叫main线程，这点 // 我们会在后面解析,因为窗口一和窗口二同时执行，那么最少需要25秒的时间才能完成两个线程的执行， // 这里我们睡眠30s，足矣，不然main线程启动完两个线程后直接挂掉了，无法监视时间 Thread.sleep(30_000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println("所有窗口按照预期都执行完了点餐"); &#125;&#125; 执行结果： 分析 由于窗口一和窗口二是并行执行的，所以理论上两个线程完美状态是共耗时25s]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kafka安装]]></title>
    <url>%2FKafka%2F89340871.html</url>
    <content type="text"></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Kafka学习笔记]]></title>
    <url>%2FKafka%2Fb1bf01c2.html</url>
    <content type="text"></content>
      <categories>
        <category>Kafka</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yum更换镜像源]]></title>
    <url>%2FLinux%2F3c238fc5.html</url>
    <content type="text"><![CDATA[CentOS 7更换国内镜像源阿里源备份1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 更新下载新的CentOS-Base.repo 到/etc/yum.repos.d/ CentOS 61wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo 或者 1curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo CentOS 71wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 或者 1curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 生成缓存1yum makecache]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Cent OS</tag>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《软件安装入门到卸载系列》]]></title>
    <url>%2FLinux%2F6b1b7458.html</url>
    <content type="text"><![CDATA[Cent OS 7.xErlang安装yum更换镜像源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Cent OS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Erlang的安装与卸载]]></title>
    <url>%2FLinux%2Fe03cc139.html</url>
    <content type="text"><![CDATA[CenOS 7.x准备工作erlang官网下载地址：https://www.erlang.org/downloads erlang solutions 地址：https://www.erlang-solutions.com/resources/download.html 安装wget工具 1yum install wget yum方式安装官方文档地址：https://www.erlang-solutions.com/resources/download.html 添加存储库条目12wget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpmrpm -Uvh erlang-solutions-1.0-1.noarch.rpm 如果在执行rpm -Uvh erlang-solutions-1.0-1.noarch.rpm的时候报错 执行以下命令,然后重新执行rpm -Uvh erlang-solutions-1.0-1.noarch.rpm 1yum install epel-release 安装Erlang1yum install erlang 验证安装结果1erl -version 安装成功界面如下图所示]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Cent OS</tag>
        <tag>Erlang</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VMWare安装CentOS7虚拟机]]></title>
    <url>%2FVMware%2F4a5e8db3.html</url>
    <content type="text"><![CDATA[VMware14安装CentOS7安装环境说明 Windows10 64位 VMware® Workstation 14 Pro CentOS-7-x86_64-Minimal-1611.iso 安装步骤 选择创建新的虚拟机 选择自定义创建虚拟机 选择Workstation14.x，点击下一步 选择安装程序光盘映像文件，然后点击下一步 选择虚拟机安装名称和位置 设置虚拟机处理器和内核数，机器性能好的可以往上选，这里用默认的就行，然后点击下一步 设置虚拟机内存，依旧视自己的电脑配置而定，这里使用默认推荐的内存1G，够用了，点击下一步 设置网络，这里使用默认的NAT网络制式就可以了，然后下一步 设置I/O控制器类型，这里使用默认的，点击下一步 设置磁盘类型，选择默认的，点击下一步 选择磁盘，使用默认的，选择下一步 指定磁盘容量，看需求和机器配置，这里使用20G就可以了，设置完后点击下一步 设置创建的虚拟机磁盘文件名，也就是虚拟机的打开文件，以后迁移，克隆用到的。 创建完成，点击完成，之后自动安装开启。 进入CentOS安装界面，选择安装CentOS,Install CentOS Linux 7这个选项，然后就开始安装了，鼠标出入Vmware使用Ctrl + Alt 进入语言选择界面，选择语言，依据需求选择，点击Continue 配置系统安装项，因为这里使用的是最小化安装，所以SOFRWARE SELECTION里面什么都没有，可以设置DATE &amp; TIME和KEYBOARD制式等，还有NETWORK &amp; HOSTNAME等。配置结束后点击Begin Installation 设置root用户密码和用户认证 这里建议设置root密码，然后可以使用root帐号登录，免去授权的麻烦，另外，如果密码较弱，按照提示点击两次Done即可。然后等待安装结束。 等待安装结束，重启，完成安装 输入帐号密码，如果能进入系统，恭喜你，安装成功了。]]></content>
      <categories>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ SpringCloud实战]]></title>
    <url>%2FRabbitMQ%2F1a80a0df.html</url>
    <content type="text"></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ SpringBoot实战]]></title>
    <url>%2FRabbitMQ%2F93e9b7c4.html</url>
    <content type="text"></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ_Java实战]]></title>
    <url>%2FRabbitMQ%2F617fec18.html</url>
    <content type="text"></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RabbitMQ简介与安装]]></title>
    <url>%2FRabbitMQ%2Fa4560bed.html</url>
    <content type="text"><![CDATA[RabbitMQ简介与安装简介安装WindowsCentOS 7在安装RabbitMQ之前，必须安装和RabbitMQ版本相匹配的Erlang/OTP。Erlang和RabbitMQ的对应关系可以看下面这个网址：https://www.rabbitmq.com/which-erlang.html 安装Erlang参考 Erlang安装 安装RabbitMQ 选择目录1cd /home 下载rabbitMQ1wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.18/rabbitmq-server-3.7.18-1.el7.noarch.rpm 安装1yum install rabbitmq-server-3.7.18-1.el7.noarch.rpm 设置开机启动1chkconfig rabbitmq-server on 启用Web管理插件查找rabbitmq-server的安装目录 1vi /usr/lib/systemd/system/rabbitmq-server.service 其中ExecStart和ExecStop就是命令行工具的目录，就是rabbitmq-sercer的命令目录，找到后进去目录 12cd /usr/sbin./rabbitmq-plugins enable rabbitmq_management 启用成功的标识 重启rabitmq服务1systemctl restart rabbitmq-server 关闭防火墙/开放端口15672关闭防火墙 1systemctl stop firewalld 开放端口 1firwall-cmd --zone=public --add-port=15672/tcp --permanent 添加用户进入rabbitmq命令目录，或者直接使用rabbimqctl全局命令 1cd /usr/sbin 执行添加用户命令，并授予administrator权限，可用于登录Web管理界面 123./rabbitmqctl add_user admin 123456./rabbitmqctl set_user_tags admin adminsitrator./rabbitmqctl list_users 登录Web界面，验证 #####]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《RabbitMQ学习笔记》]]></title>
    <url>%2FRabbitMQ%2Fe6c0ec84.html</url>
    <content type="text"><![CDATA[RabbitMQ学习笔记目录01_RabbitMQ简介与安装02_RabbitMQ_Java实战03_RabbitMQ_SpringBoot实战04_RabbitMQ_SpringCloud实战]]></content>
      <categories>
        <category>RabbitMQ</category>
      </categories>
      <tags>
        <tag>RabbitMQ</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2Funcategorized%2F0.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[准备开发环境]]></title>
    <url>%2FSpringCloud%2F6d3e0eb2.html</url>
    <content type="text"><![CDATA[本教程的所有示例都统一使用以下环境配置 Windows 10IDEA 2018.2 UltmiateMaven 3.5.0Git 2.9.0SpringBoot 2.0.1SpringCloud Dalston.SR1 关于Maven的安装使用说明请参考博主的《Maven实战》系列的 下载与安装Maven 关于Git的安装使用说明请参考博主的《白话Git》 关于IDEA的使用说明请参考博主的《编程利器——IDEA》]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SpringCloud简介]]></title>
    <url>%2FSpringCloud%2F4dd766a2.html</url>
    <content type="text"></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《疯狂SpringCloud 微服务架构实战》学习笔记目录]]></title>
    <url>%2FSpringCloud%2F4dd766a2.html</url>
    <content type="text"><![CDATA[01_SpringCloud简介02_准备开发环境03_SpringCloud组件——Eureka04_SpringCloud组件——]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三分钟利用Github配合Hexo搭建博客]]></title>
    <url>%2FHexo%2F1092497b.html</url>
    <content type="text"><![CDATA[环境准备 操作系统：Windows 10 Git NodeJs Hexo 申请Github账号 第一步：安装Git由于是在Windows环境下进行环境的搭建，所以需要下载window版本的git，具体安装方式可以参看博主的文章：[Git简介与安装(/Git/a21830fd.html)，windows版本的git安装完成后自带git bash，一个非常好用的命令行工具，后续很多操作都会使用到这个，调出git bash的方法也很简单，鼠标右键就能看到，有一个命令是git bash here，点击后就能弹出一个小黑框框了，输入git version查看git版本，验证安装是否正确 第二步：安装NodeJs下载NodeJshexo依赖于nodejs，所以nodeJs是必须要下载的。下载地址：https://nodejs.org/zh-cn/download/，如果这个链接下载太慢了，可以去nodejs中文网下载，下载地址：http://nodejs.cn/download/ 依据自己的操作系统，自己的系统位数，是32位的还是64为的进行下载，LTS为长期支持版，Current为当前最新版，这里肯定下载LTS版本，写这篇博客的时候最新版本：12.11.1 下载完成后是一个msi文件，即为windows安装文件，双击文件进行安装，一路next。安装完毕后，按住win + R快捷键，输入cmd调出命令行窗口，输入node -v，结果如下图所示，即为安装成功 第三步：安装hexo安装hexo新建一个空的文件件，用于存放博客的所有东西，然后进入该文件夹，这些都是用window命令敲，建议使用管理员身份运行，不然可能会报错。可以鼠标右键开始菜单，然后点击命令提示符（管理员）A，通过盘符进入具体盘，然后通过cd命令进入具体目录，博主的目录为：T:\blog，所以执行以下命令即可： 12T:cd blog 进入目录之后执行以下命令，然后等待下载完毕即可，可能有些慢哦 1npm i -g hexo 安装完成后，查看版本： 1npm -v 初始化博客信息，通过执行hexo init命令，即可初始化我们的博客 生成目录解析 node_modules：依赖包目录 public：存放的是生成的页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 启动hexo博客运行以下命令启动hexo博客，默认端口是4000 1hexo server 访问hexo博客浏览器中输入：http://localhost:4000即可访问安装好的博客，默认效果如下图所示 hexo常用命令12345678$ hexo generate (hexo g) 生成静态文件$ hexo server (hexo s) 启动本地服务$ hexo deploy (hexo d) 提交到远程仓库$ hexo new page "xx"(hexo n page) 创建页面 $ hexo new "xx" (hexo n "") 创建文章$ hexo d -g 生成静态并提交到远程仓库$ hexo s -g 生成静态文件并启动本地预览$ hexo clean 清除本地 public 文件 第四步：申请github帐号申请帐号已经有账号的直接进入下一步，没有的通过访问github官方网址：https://github.com进行帐号注册。 创建仓库帐号注册完毕后，创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称，一定要按照这个规则创建仓库，否则无效，相当于普通仓库，如下： 此处博主使用新建的test仓库做演示用 这里有两个地址，一个是 Https，一个是 SSH 。Https 每次提交都需要输入用户名和密码，SSH 只要添加了 SSH key 值，以后提交不需要输入用户名和密码。 再次强调 这里创建的仓库名称必须为 username.github.io，username 替换成你的 github 用户名，每个账户有且只有一个仓库用来存放网页静态文件，这里名称是固定的。当创建其他仓库的时候，仓库名称可以自定义。 github配置ssh key如果知道ssh key的配置或者已经配置过了就可以跳过这段，直接看下一段，执行以下命令. 生成ssh key1ssh-keygen -t rsa -C "你注册用的邮箱" 把&quot;你注册用的邮箱&quot;替换成你真实的邮箱，然后点击回车。接着会让你输入文件名，点击回车直接忽略，接着会让输入两次密码，点击两次回车，直接设置为空，不用输入密码 。 创建成功之后，通过如下命令拷贝 ssh key 的内容： 1clip &lt; ~/.ssh/id_rsa.pub github 添加ssh key进入添加界面 点击NEW SSH key添加，把之前拷贝的内容粘贴到key中，然后点击Add SSH key 添加成功后就可以看到自己添加的ssh key了 验证 如果验证已经添加成功了呢，在git bash中利用以下命令做测试，中间有一部要输入yes的哦 1ssh -T git@github.com 修改配置信息修改站点的配置文件_config.yml，该文件位于站点初始化的目录，博主这里是：T:\blog\_config.yml 修改deploy配置 注 ：如上图所示，找到 GitHub 上对应的远程仓库地址，点击右侧复制按钮，把 “git@github.com:username.github.io.git“ 替换成刚刚复制的远程仓库地址。 修改site等相关信息1234567title: Hexosubtitle:description:keywords:author: xxlanguage: zh-Hanstimezone: 注 ：网站名称（title），作者 (author)，语言 (language) 修改完成后可以重新启动hexo server，然后观察到对应的效果，如果满意，即可进行部署 部署生成静态文件1hexo g 提交到远程仓库下载插件： 1npm install hexo-deployer-git --save 插件安装完成后，就可以部署了，执行以下命令，即可部署到github上，在github上可以看见我们提交的静态文件了，就可以通过http://yourname.github.io访问我们的博客了，`yourname`改成你自己的用户名 1hexo d 如果你在运行上述命令是发生了如下错误 那么是因为没有配置git 的用户名和邮箱，执行以下命令配置一下就好了 12git config --global user.email "你的github邮箱"git confgi --global user.name "你的github用户名" 一定要用github的用户名，这样你的提交才会被统计到，配置完成后，重新部署一次 部署成功后我们去github看一下文件是否上去了（此处仓库名为test仅为演示用），如果上去了就访问一下博客地址：https://yourname.github.io(yourname请换成自己注册的github的用户名) 如果能访问就是搭建成功了，恭喜！]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git配置文件作用域及最小可用配置讲解]]></title>
    <url>%2FGit%2F85076309.html</url>
    <content type="text"><![CDATA[工欲善其事必先利其器 这章呢，讲解下Git的配置，通过这些配置，我们能更好的使用Git这个神兵利器。想开始使用Git，也不是没有条件的，Git存在一个最小化的配置，只有配置了这个最小配置，我们就能开始使用Git了，至于其他的相关配置项会在后面的文章进行介绍。 Git的最小配置12git config --global user.name 'yourname'git config --global user.email 'youremail' 配置解释第一点：作用域 global ：global意指全局作用域，即在没有配置其他作用域的情况下，当前系统登录用户所建的所有仓库的配置信息 第二点：配置项 user.name：使用仓库的用户的用户名 user.email：使用仓库的用户的用户邮箱 之所以会配置这两项之后就能开始对Git的使用了，是因为人性化的考虑，在Git的使用中，无论是单人使用，还是团队使用，user.name以及user.email能够准确的对每一次Git的提交做出标记，能够标记出：是谁在什么时候，做了什么提交，如果出现问题，或者写的太棒了，我想联系他，那么该通过什么方式来联系，没错，就是那个邮箱了。这种设计是一种对提交记录的追踪，对代码贡献度的统计，对代码bug的追踪甩锅等等，都是Git设计哲学中不可或缺的一部分。 下面来看一下到底global代表了什么，即Git的配置作用域。 配置作用域在Git的配置哲学中，配置的作用域分为三种：系统级别（system），全局级别(global)，仓库级别(local)。 系统级别（system） 定义 什么是系统级别的配置呢，系统级别的配置就是上面所说的针对系统下的所有用户的所有仓库使用同一种配置文件。其约束范围是系统中所有用户的所有仓库 作用域 系统中的所有用户的所有仓库 配置文件位置 windows 如果你找不到，没关系，教你一招，输入以下命令，就出来了 1git config --system -e Linux 一般是/etc/gitconfig 全局级别（global） 定义 全局级别的配置是系统下的当前登录用户的所有仓库使用同一种配置文件。其约束范围是当前登录用户的所有仓库 作用域 当前登录用户的所有仓库 配置文件位置： Windows C:/User/[你的用户目录]/.gitconfig Linux ~/.gitconfig 仓库级别（local） 定义 仓库级别的配置是当前仓库使用的配置文件。其约束范围是当前配置文件所在仓库 作用域： 具体配置的仓库 配置文件位置： Windwos 仓库目录/.git/config Linux 仓库目录/.git/config 注意事项 无论是在Windows中还是Linux中.git目录是个隐藏文件夹，在Windows中需要打开隐藏文件才能看到，Linux中可以使用命令查看，可以尝试ls -al，视操作系统而定，如若不行，则需要自行百度。 配置优先级在Git的三种配置文件的优先级，按照就近原则，即 仓库级别 &gt; 全局级别 &gt; 系统级别，即便系统级别的配置了相关配置项，那么我只要在全局级别中进行了配置，就以全局配置的配置项为准，同样的，即便你在全局级别的配置中配置了相关配置项，那么只要我在仓库级别进行了配置，就以仓库级别的为准。 进行了上述的最小配置后，我们就可以正式的开始使用Git了。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《编程利器——IDEA》]]></title>
    <url>%2FIDEA%2Fa44a05a2.html</url>
    <content type="text"><![CDATA[工欲善其事必先利其器 IDEA 01_IDEA简介与安装02_Git简介与安装]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TODO]]></title>
    <url>%2FPlan%2F6c9b5b14.html</url>
    <content type="text"><![CDATA[TODO1 TODO2]]></content>
      <categories>
        <category>Plan</category>
      </categories>
      <tags>
        <tag>Plan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《ElasticSearch笔记》]]></title>
    <url>%2FElasticSearch%2Fa8882e14.html</url>
    <content type="text"><![CDATA[目录ElasticSearch核心知识01_什么是ElasticSearch02_ElasticSearch的03_Java中的数据类型 ElasticSearch运维优化ELK]]></content>
      <categories>
        <category>ElasticSearch</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《白话Git》]]></title>
    <url>%2FGit%2Fa44a05a2.html</url>
    <content type="text"><![CDATA[工欲善其事必先利其器 Git作为当前最流行的版本控制工具，以其分布式，独特的分支管理方式闻名于众多开发者心中，是目前主流的版本管理工具，我们所熟知的全球闻名的同性交友社区Github就是依赖Git而打造的。依赖Git的设计哲学，也衍生出了很多好用的工具，如Github，Gitlab，码云等代码托管平台，也造就了SourceTree，Git客户端等强大的图形化界面，但是真正的高手都是通过黑窗口和命令来提现出自己的不凡，同样这也是客户端所不能带来的高度自由的用户体验。本系列将以白话文的形式来对Git设计哲学进行解读，对其原来的概念，理论，命令，配合以实战的方式来进行说明，分为以下几章，循序渐进，由浅入深，一一道来。 Git简介与安装Git配置文件作用域及最小可用配置讲解]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git简介与安装]]></title>
    <url>%2FGit%2Fa21830fd.html</url>
    <content type="text"><![CDATA[工欲善其事必先利其器 说到软件的安装，作为程序员，简单点分，就三平台：Windows，Linux平台，Mac平台，关于Git的安装，其官方文档写的很清楚了。地址是:https://git-scm.com/book/zh/v2/起步-安装-Git， 笔者这里主要是是用Windows进行开发，而且Windows版本的git提供的Bash也是很强大的,这里就对windows版本下进行的安装进行一个图解说明，至于Linux和Mac平台的，可以参照官方文档进行安装。 开发环境及软件版本 Windows 10 Git 2.21.0(点击可下载) 安装步骤 步骤一点击安装程序，进入安装界面，点击Next，进入下一步安装 步骤二选择软件安装路径，选择完后，点击Next，进入下一步安装 步骤三选择配置信息，这里选用默认的配置信息就行了,然后点击Next，进入下一步安装 步骤四选择git使用的编辑器，这个编辑器应该主要是针对git diff和git merge的，这里就先用系统默认的Vim就好了，后续会使用更方便的可视化图形界面工具。然后点击Next，进入下一步安装 步骤五Git环境变量的设置，这里使用默认的就好，会添加到系统的环境变量中，在windows中就是用过cmd命令行窗口或者GitBash都能够运行Git命令。然后点击Next，进入下一步安装 步骤六选用SSH，这里选用系统默认的就好了。然后点击Next，进入下一步安装 步骤七选用SSL，这里选用系统默认的就好了。然后点击Next，进入下一步安装 步骤八设置换行符约定，这里我们使用Git推荐的规则，针对Windows系统的，Git会在拉取代码的时候进行换行符的转换，转换为Windows系统的换行符，在提交代码的时候也会做一层转换，转换为试用Linux系统的换行符。然后点击Next，进入下一步安装 步骤九设置Git的终端类型，这里同样选择系统默认的，系统默认的终端功能很强大，而且色彩分明哦，这里就不需要试用windows的黑窗口了。然后点击Next，进入下一步安装 步骤十配置Git的其他额外配置项，这里使用系统默认的配置想就可以了。然后点击Next，进入下一步安装 步骤十一点击Next后会进入Git安装界面，这个时候等待安装就行了。 步骤十二安装完毕，点击鼠标右键就可以看到Git相关的东西了，会多出两个：Git GUI Here和Git Bash Here两个菜单项，常用的就是Git Bash Here了 总结 Git在Windows上的安装依旧和其他软件的安装没有任何区别，完全可以傻瓜式无脑点击下一步，之所以能够这么做的原因，就是我们即便安装完成了，也可以有足够的自由来更改之前的选项来满足自己的喜好。 下一章我们来讲解：Git的配置详解]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写作计划]]></title>
    <url>%2Funcategorized%2F89edd5a9.html</url>
    <content type="text"><![CDATA[我的写作计划咯，输入密码，查看文章 Incorrect Password! No content to display! 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]]></content>
      <tags>
        <tag>计划</tag>
      </tags>
  </entry>
</search>
